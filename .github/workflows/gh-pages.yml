name: build-deploy
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      deployment-type: ${{ steps.first-run.outputs.type }}
      source-branch: ${{ steps.first-run.outputs.sourceBranch }}
      source-path: ${{ steps.first-run.outputs.sourcePath }}
    if: github.run_number != 1
    steps:
      - name: First Run
        uses: actions/github-script@v7
        id: first-run
        with:
          script: |
            const { owner, repo } = context.repo;
            const currentBranch = context.ref.replace('refs/heads/', '');

            try {
              const response = await github.request('GET /repos/{owner}/{repo}/pages', { owner, repo });
              const buildType = response.data.build_type;
              const deploymentBranch = response.data.source.branch;
              const rootDir = response.data.source.path;

              core.setOutput('type', buildType);
              core.setOutput('sourceBranch', deploymentBranch);
              core.setOutput('sourcePath', rootDir);
              if (currentBranch === deploymentBranch) {
                if (rootDir === "/") {
                  core.setFailed(`The current branch '${currentBranch}' is set for deployment.`);
                  core.warning("To deploy from the same branch, please update the source path to '/docs'.");
                }
              }
            } catch (error) {
              core.setFailed('Please verify that the repository has Pages enabled and configured to build.');
              core.notice(`https://github.com/${owner}/${repo}/settings/pages ([Build and deployment] > [Branch])`);
            }

      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: pnpm

      - name: Install and Build
        run: |
          pnpm install --frozen-lockfile
          pnpm run build --public-url /${{ github.event.repository.name }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy-workflow:
    needs: build
    if: success() && needs.build.outputs.deployment-type == 'workflow'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Deploy
        id: deploy
        uses: actions/deploy-pages@v4

  deploy-legacy:
    needs: build
    if: success() && needs.build.outputs.deployment-type == 'legacy'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages

      - name: Extract artifact
        run: |
          mkdir -p dist
          tar -xvf ./artifact.tar -C dist

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          destination_dir: '.${{ needs.build.outputs.source-path }}'
          publish_branch: ${{ needs.build.outputs.source-branch }}
          force_orphan: ${{ needs.build.outputs.source-branch != 'main' }}
          keep_files: ${{ needs.build.outputs.source-branch == 'main' }}